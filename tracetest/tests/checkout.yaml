type: Test
spec:
  id: tdJxJ3HIR
  name: Checkout
  trigger:
    type: http
    httpRequest:
      method: POST
      url: ${env:FRONTEND_ADDRESS}/api/checkout
      body: '{"userId":"${env:otel.user.id}","email":"someone@example.com","address":{"streetAddress":"1600 Amphitheatre Parkway","state":"CA","country":"United States","city":"Mountain View","zipCode":"94043"},"userCurrency":"USD","creditCard":{"creditCardCvv":672,"creditCardExpirationMonth":1,"creditCardExpirationYear":2030,"creditCardNumber":"4432-8015-6152-0454"}}'
      headers:
        - key: Content-Type
          value: application/json
  specs:
    - selector: span[tracetest.span.type="general" name="Tracetest trigger"]
      name: Test trigger should receive a success response from frontend
      assertions:
        - attr:tracetest.response.status = 200
    - selector: span[tracetest.span.type="rpc" name="oteldemo.CheckoutService/PlaceOrder" rpc.system="grpc" rpc.method="PlaceOrder" rpc.service="oteldemo.CheckoutService"]
      name: The order should be placed for the given user cart
      assertions:
        - attr:app.user.id  =  "${env:otel.user.id}"
        - attr:rpc.grpc.status_code = 0
    - selector: span[tracetest.span.type="rpc" name="CurrencyService/Convert" rpc.system="grpc" rpc.method="Convert" rpc.service="CurrencyService"]
      name: Currency converted
      assertions:
        - attr:rpc.grpc.status_code   =   0
        - attr:tracetest.selected_spans.count >= 1
    - selector: span[name="oteldemo.CartService/GetCart" rpc.system="grpc" rpc.method="GetCart" rpc.service="oteldemo.CartService"]
      name: CartService should be called to get the given user cart
      assertions:
        - attr:rpc.grpc.status_code     =     0
    - selector: span[tracetest.span.type="database" name="HGET" db.system="redis"]
      name: Cart retrieved from redis database
      assertions:
        - attr:db.statement  =  "HGET ${env:otel.user.id}"
    - selector: span[tracetest.span.type="rpc" name="oteldemo.ShippingService/GetQuote" rpc.system="grpc"]
      name: Should get quote value
      assertions:
        - attr:rpc.grpc.status_code = 0
    - selector: span[tracetest.span.type="rpc" name="grpc.oteldemo.PaymentService/Charge" rpc.system="grpc" rpc.method="Charge" rpc.service="oteldemo.PaymentService"]
      name: User charged
      assertions:
        - attr:rpc.grpc.status_code = 0
    - selector: span[tracetest.span.type="rpc" name="oteldemo.ShippingService/ShipOrder" rpc.system="grpc"]
      name: Order was shipped
      assertions:
        - attr:rpc.grpc.status_code = 0
        - attr:tracetest.selected_spans.count >= 1
    - selector: span[name="oteldemo.CartService/EmptyCart" rpc.system="grpc" rpc.method="EmptyCart" rpc.service="oteldemo.CartService"]
      name: Cart was emptied
      assertions:
        - attr:rpc.grpc.status_code = 0
        - attr:tracetest.selected_spans.count >= 1
    - selector: span[tracetest.span.type="database" name="HMSET" db.system="redis"]
      name: Cart was updated at the redis database
      assertions:
        - attr:db.statement   =   "HMSET ${env:otel.user.id}"
    - selector: span[tracetest.span.type="http" name="POST /send_order_confirmation" http.target="/send_order_confirmation" http.method="POST"]
      name: Email confirmation sent
      assertions:
        - attr:http.status_code = 200
        - attr:tracetest.selected_spans.count >= 1
    - selector: span[tracetest.span.type="messaging" name="orders publish" messaging.system="kafka" messaging.operation="publish"]
      name: Order sent to be processed asyncronously
      assertions:
        - attr:messaging.destination.name = "orders"
    - selector: span[tracetest.span.type="messaging" name="orders receive" messaging.system="kafka" messaging.destination.name="orders" messaging.destination.kind="topic" messaging.operation="receive"]
      name: Order sent to accountability service
      assertions:
        - attr:name   =   "orders receive"
    - selector: span[tracetest.span.type="messaging" name="orders process" messaging.system="kafka" messaging.operation="process"]
      name: Order sent to fraud detection service
      assertions:
        - attr:tracetest.span.name    =    "orders process"
        - attr:messaging.kafka.consumer.group = "frauddetectionservice"
