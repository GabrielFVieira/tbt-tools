type: Test
spec:
  id: _mX6EqHIg
  name: Product Recommendation- gRPC
  trigger:
    type: grpc
    grpc:
      protobufFile: |
        syntax = "proto3";

        import "google/protobuf/timestamp.proto";

        package oteldemo;

        option go_package = "genproto/oteldemo";



        service CartService {
            rpc AddItem(AddItemRequest) returns (Empty) {}
            rpc GetCart(GetCartRequest) returns (Cart) {}
            rpc EmptyCart(EmptyCartRequest) returns (Empty) {}
        }

        message CartItem {
            string product_id = 1;
            int32  quantity = 2;
        }

        message AddItemRequest {
            string user_id = 1;
            CartItem item = 2;
        }

        message EmptyCartRequest {
            string user_id = 1;
        }

        message GetCartRequest {
            string user_id = 1;
        }

        message Cart {
            string user_id = 1;
            repeated CartItem items = 2;
        }

        message Empty {}



        service RecommendationService {
          rpc ListRecommendations(ListRecommendationsRequest) returns (ListRecommendationsResponse){}
        }

        message ListRecommendationsRequest {
            string user_id = 1;
            repeated string product_ids = 2;
        }

        message ListRecommendationsResponse {
            repeated string product_ids = 1;
        }



        service ProductCatalogService {
            rpc ListProducts(Empty) returns (ListProductsResponse) {}
            rpc GetProduct(GetProductRequest) returns (Product) {}
            rpc SearchProducts(SearchProductsRequest) returns (SearchProductsResponse) {}
        }

        message Product {
            string id = 1;
            string name = 2;
            string description = 3;
            string picture = 4;
            Money price_usd = 5;



            repeated string categories = 6;
        }

        message ListProductsResponse {
            repeated Product products = 1;
        }

        message GetProductRequest {
            string id = 1;
        }

        message SearchProductsRequest {
            string query = 1;
        }

        message SearchProductsResponse {
            repeated Product results = 1;
        }



        service ShippingService {
            rpc GetQuote(GetQuoteRequest) returns (GetQuoteResponse) {}
            rpc ShipOrder(ShipOrderRequest) returns (ShipOrderResponse) {}
        }

        message GetQuoteRequest {
            Address address = 1;
            repeated CartItem items = 2;
        }

        message GetQuoteResponse {
            Money cost_usd = 1;
        }

        message ShipOrderRequest {
            Address address = 1;
            repeated CartItem items = 2;
        }

        message ShipOrderResponse {
            string tracking_id = 1;
        }

        message Address {
            string street_address = 1;
            string city = 2;
            string state = 3;
            string country = 4;
            int32 zip_code = 5;
        }



        service CurrencyService {
            rpc GetSupportedCurrencies(Empty) returns (GetSupportedCurrenciesResponse) {}
            rpc Convert(CurrencyConversionRequest) returns (Money) {}
        }


        message Money {

            string currency_code = 1;



            int64 units = 2;







            int32 nanos = 3;
        }

        message GetSupportedCurrenciesResponse {

            repeated string currency_codes = 1;
        }

        message CurrencyConversionRequest {
            Money from = 1;


            string to_code = 2;
        }



        service PaymentService {
            rpc Charge(ChargeRequest) returns (ChargeResponse) {}
        }

        message CreditCardInfo {
            string credit_card_number = 1;
            int32 credit_card_cvv = 2;
            int32 credit_card_expiration_year = 3;
            int32 credit_card_expiration_month = 4;
        }

        message ChargeRequest {
            Money amount = 1;
            CreditCardInfo credit_card = 2;
        }

        message ChargeResponse {
            string transaction_id = 1;
        }



        service EmailService {
            rpc SendOrderConfirmation(SendOrderConfirmationRequest) returns (Empty) {}
        }

        message OrderItem {
            CartItem item = 1;
            Money cost = 2;
        }

        message OrderResult {
            string   order_id = 1;
            string   shipping_tracking_id = 2;
            Money shipping_cost = 3;
            Address  shipping_address = 4;
            repeated OrderItem items = 5;
        }

        message SendOrderConfirmationRequest {
            string email = 1;
            OrderResult order = 2;
        }




        service CheckoutService {
            rpc PlaceOrder(PlaceOrderRequest) returns (PlaceOrderResponse) {}
        }

        message PlaceOrderRequest {
            string user_id = 1;
            string user_currency = 2;

            Address address = 3;
            string email = 5;
            CreditCardInfo credit_card = 6;
        }

        message PlaceOrderResponse {
            OrderResult order = 1;
        }



        service AdService {
            rpc GetAds(AdRequest) returns (AdResponse) {}
        }

        message AdRequest {

            repeated string context_keys = 1;
        }

        message AdResponse {
            repeated Ad ads = 1;
        }

        message Ad {

            string redirect_url = 1;


            string text = 2;
        }



        service FeatureFlagService {
          rpc GetFlag(GetFlagRequest) returns (GetFlagResponse) {}
          rpc CreateFlag(CreateFlagRequest) returns (CreateFlagResponse) {}
          rpc UpdateFlag(UpdateFlagRequest) returns (UpdateFlagResponse) {}
          rpc ListFlags(ListFlagsRequest) returns (ListFlagsResponse) {}
          rpc DeleteFlag(DeleteFlagRequest) returns (DeleteFlagResponse) {}
        }

        message Flag {
          string name = 1;
          string description = 2;
          bool enabled = 3;
          google.protobuf.Timestamp created_at = 4;
          google.protobuf.Timestamp updated_at = 5;
        }

        message GetFlagRequest {
          string name = 1;
        }

        message GetFlagResponse {
          Flag flag = 1;
        }

        message CreateFlagRequest {
          string name = 1;
          string description = 2;
          bool enabled = 3;
        }

        message CreateFlagResponse {
          Flag flag = 1;
        }

        message UpdateFlagRequest {
          string name = 1;
          bool enabled = 2;
        }

        message UpdateFlagResponse {}

        message ListFlagsRequest {}

        message ListFlagsResponse {
          repeated Flag flag = 1;
        }

        message DeleteFlagRequest {
          string name = 1;
        }

        message DeleteFlagResponse {}
      address: otel-demo-recommendationservice.otel-demo.svc.cluster.local:8080
      method: oteldemo.RecommendationService.ListRecommendations
      auth: {}

  specs:
    - selector: span[tracetest.span.type="general" name="Tracetest trigger"]
      name: Test trigger should receive a success response from frontend with 4 recommended products
      assertions:
        - attr:tracetest.response.status    =    200
        - attr:tracetest.response.body | json_path '$[*]' | length  =  4
    - selector: span[tracetest.span.type="rpc" name="/oteldemo.RecommendationService/ListRecommendations" rpc.system="grpc" rpc.method="ListRecommendations" rpc.service="oteldemo.RecommendationService"]
      name: RecomendationService/ListRecommendations should be called via gRPC and return recommend 5 products
      assertions:
        - attr:app.products_recommended.count  =  5
        - attr:rpc.grpc.status_code  =  0
    - selector: span[tracetest.span.type="rpc" name="oteldemo.ProductCatalogService/GetProduct" rpc.system="grpc" rpc.method="GetProduct" rpc.service="oteldemo.ProductCatalogService"]
      name: ProductCatalogService/GetProduct should be called via gRPC 4 times by the frontend
      assertions:
        - attr:tracetest.selected_spans.count  =  4
        - attr:rpc.grpc.status_code  =  0
    - selector: span[tracetest.span.type="rpc" name="oteldemo.ProductCatalogService/ListProducts" rpc.system="grpc" rpc.method="ListProducts" rpc.service="oteldemo.ProductCatalogService"]
      name: ProductCatalogService/ListProducts should be called via gRPC and return 10 products
      assertions:
        - attr:app.products.count = 10
        - attr:rpc.grpc.status_code = 0
    - selector: span[tracetest.span.type="rpc" name="/oteldemo.FeatureFlagService/GetFlag" rpc.system="grpc" app.featureflag.name="recommendationCache"]
      name: FeatureFlagService/GetFlag should be called checking the value of the recommendationCache flag
      assertions:
        - attr:app.featureflag.enabled != ""
    - selector: span[tracetest.span.type="database" name="featureflagservice.repo.query:featureflags" db.name="ffs"]
      name: Feature flag database should be called by it's service
      assertions:
        - attr:source  =  "featureflags"
        - attr:tracetest.span.type  =  "database"
